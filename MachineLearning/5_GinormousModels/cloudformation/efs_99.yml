AWSTemplateFormatVersion: '2010-09-09'
Description: Create VPC, Subnets, EFS with Access points and EC2 to install ML framework and dependencies.

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0ab4d1e9cf9a1215a
    us-east-2:
      AMI: ami-0277b52859bac6f4b
    us-west-2:
      AMI: ami-0721c9af7b9b75114
    eu-west-1:
      AMI: ami-0f89681a05a3a9de7
    ap-southeast-1:
      AMI: ami-018c1c51c7a13e363
    ap-northeast-1:
      AMI: ami-06631ebafb3ae5d34
    eu-central-1:
      AMI: ami-089b5384aac360007

Resources:
  LambdaEFSMLVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: LambdaEFSML/LambdaEFSMLVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: LambdaEFSMLVPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref LambdaEFSMLVPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref LambdaEFSMLVPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref LambdaEFSMLVPC
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: LambdaEFSMLVPC
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: LambdaEFSMLVPC

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn: NatPublicIP
    Properties: 
      AllocationId: !GetAtt NatPublicIP.AllocationId
      SubnetId: !Ref PublicSubnetOne
     
  NatPublicIP:
    Type: "AWS::EC2::EIP"
    DependsOn: LambdaEFSMLVPC
    Properties:
      Domain: vpc

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetOne

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetOne

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetTwo

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: LambdaEFSMLVPC
      GroupName: EfsMountedEC2SG
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: LambdaEFSMLVPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0

  FileSystemResource:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      ProvisionedThroughputInMibps: 15
      ThroughputMode: provisioned
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: MLInferenceFileSystem
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref PublicSubnetOne
      SecurityGroups:
      - !Ref MountTargetSecurityGroup

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref PrivateSubnetOne
      SecurityGroups:
      - !Ref MountTargetSecurityGroup

  MountTargetResource3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref PrivateSubnetTwo
      SecurityGroups:
      - !Ref MountTargetSecurityGroup

  AccessPointResource:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      AccessPointTags:
        - Key: Name
          Value: MLInferenceAccessPoint
      FileSystemId: !Ref FileSystemResource
      PosixUser:
        Uid: "1001"
        Gid: "1001"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1001"
          OwnerUid: "1001"
          Permissions: "755"
        Path: "/ml"

  EfsMountEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: c5.large
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroupIds:
      - !Ref InstanceSecurityGroup
      SubnetId: !Ref PublicSubnetOne
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          # Installing the amazon-efs-utils Package on Amazon Linux
          sudo yum -y install amazon-efs-utils
           # A directory for our Python packages and model
          mkdir -p /home/ec2-user/efs
          Region=$(curl -fsq http://169.254.169.254/latest/meta-data/placement/availability-zone |  sed 's/[a-z]$//')
          # Wait for EFS File System to be ready and DNS to propagate
          date
          echo Waiting for EFS File System to be ready and DNS to propagate
          until nslookup ${FileSystemResource}.efs.$Region.amazonaws.com; do
            sleep 5
          done
          date
          # Mount the EFS file system using Access Point
          sudo mount -t efs -o tls,accesspoint=${AccessPointResource} ${FileSystemResource}:/ /home/ec2-user/efs
          mkdir -p /home/ec2-user/efs/model
          curl https://storage.googleapis.com/tfhub-modules/google/openimages_v4/ssd/mobilenet_v2/1.tar.gz --output /tmp/1.tar.gz
          tar zxf /tmp/1.tar.gz -C /home/ec2-user/efs/model
          echo Installing virtual environment..
          python3 -m venv /home/ec2-user/efs/tensorflow
          echo Installing Tensorflow..
          source /home/ec2-user/efs/tensorflow/bin/activate && pip3 install tensorflow
          sudo chown -R 1001:1001 /home/ec2-user/efs/
      Tags:
      - Key: Name
        Value: tensorflow-for-serverless-inference-cfn-ec2
    DependsOn:
      - FileSystemResource
      - AccessPointResource
      - MountTargetResource1

Outputs:
  FileSystemID:
    Description: File system ID
    Value: !Ref FileSystemResource
    Export:
      Name: !Sub "${AWS::StackName}-FileSystemID"
  AccessPointID:
    Description: Access Point ID
    Value: !Ref AccessPointResource
    Export:
      Name: !Sub "${AWS::StackName}-AccessPointID"
  AccesspointARN:
    Description: Access point ARN
    Value: !GetAtt AccessPointResource.Arn
  DefaultSecurityGroup:
    Description: Default Security Group
    Value: !GetAtt LambdaEFSMLVPC.DefaultSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-DefaultSecurityGroup"
  PublicSubnetOne:
    Description: Subnet 1 in the VPC
    Value: !Ref PublicSubnetOne
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetOne"
  PrivateSubnetOne:
    Description: Subnet 2 in the VPC
    Value: !Ref PrivateSubnetOne
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetOne"
  PrivateSubnetTwo:
    Description: Subnet 3 in the VPC
    Value: !Ref PrivateSubnetTwo
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetTwo"
  LambdaEFSMLVPC:
    Description: The Mount Target VPC Id
    Value: !Ref LambdaEFSMLVPC
    Export:
      Name: !Sub "${AWS::StackName}-LambdaEFSMLVPC"